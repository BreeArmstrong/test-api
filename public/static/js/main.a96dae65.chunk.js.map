{"version":3,"sources":["Routes/reviews-list.js","Routes/review-details.js","App.js","serviceWorker.js","index.js"],"names":["Review","props","rendered","Object","entries","review","map","key","value","className","to","id","ReviewsList","sortDataClick","e","console","log","target","dataset","prop","setSortData","heading","sortOrder","asc","renderedHeadings","keys","get","data-prop","onClick","sortBy","reviews","sortData","r","index","ReviewDetails","JSON","stringify","this","Component","displayName","App","useState","setReviews","useEffect","length","a","async","fetch","res","json","getReviews","then","exact","path","component","routeProps","find","match","params","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8UAOMA,EAAS,SAACC,GACd,IAAMC,EAAWC,OAAOC,QAAQH,EAAMI,QAAQC,KAAI,mCAAEC,EAAF,KAAOC,EAAP,YAAkB,yBAAKD,IAAKA,GAAMC,MACpF,OAAQ,yBAAKC,UAAW,WACtB,kBAAC,IAAD,CAAMC,GAAE,mBAAcT,EAAMI,OAAOM,KAAnC,gBACCT,IA6BUU,MAxBf,SAAqBX,GACnB,IAAMY,EAAgB,SAACC,GACrBC,QAAQC,IAAIF,EAAEG,OAAOC,QAAQC,MAC7BlB,EAAMmB,YAAY,CAChBC,QAASP,EAAEG,OAAOC,QAAQC,KAC1BG,WAAYrB,EAAMmB,YAAYG,OAG5BC,EAAmBrB,OAAOsB,KAAKC,cAAIzB,EAAO,eAAiB,IAC9DK,KAAI,SAAAa,GAAI,OAAI,yBACXQ,YAAWR,EACXS,QAASf,EACTN,IAAKY,GAAOA,MACVjB,EAAW2B,iBAAO,YAAI5B,EAAM6B,SAAU,CAAC7B,EAAM8B,SAASV,UACzDf,KAAI,SAAC0B,EAAGC,GAAJ,OAAc,kBAAC,EAAD,CAAQ5B,OAAQ2B,EAAGC,MAAOA,OAC/C,OACE,yBAAKxB,UAAW,yBAEbe,EACAtB,I,wCChCcgC,E,iLAOjB,OACE,6BACE,kDACA,6BACGC,KAAKC,UAAUC,KAAKpC,MAAMI,OAAQ,KAAM,S,GAXRiC,aAAtBJ,EACZK,YAAc,gBCgDvBxB,QAAQC,IAAI,oBACGwB,MA1Cf,WACEzB,QAAQC,IAAI,wBADC,MAEiByB,mBAAS,IAF1B,mBAENX,EAFM,KAEGY,EAFH,OAGmBD,mBAAS,CAACpB,QAAS,KAAME,KAAK,IAHjD,mBAGNQ,EAHM,KAGIX,EAHJ,KAiBb,OANAuB,qBAAU,WACHb,EAAQc,QARI,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACCE,MAAM,mDADP,cACXC,EADW,kBAAAH,EAAA,MAEKG,EAAIC,QAFT,OAEXnB,EAFW,OAGjBY,EAAWZ,GAHM,qCASfoB,GAAaC,UAKf,kBAAC,IAAD,KACE,6BACE,6BACE,kBAAC,IAAD,CAAMzC,GAAG,YAAT,sBAEF,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,YAChB,kBAAC,EAAD,CAAajC,YAAaA,EAAaW,SAAUA,EAAUD,QAASA,KAErE,kBAAC,IAAD,CAAOuB,KAAK,eAAeC,UAAW,SAACC,GACrC,IAAMlD,EAASyB,EAAQ0B,MAAK,SAAAxB,GAAC,OAAIA,EAAErB,KAAO4C,EAAWE,MAAMC,OAAO/C,MAElE,OADAI,QAAQC,IAAIX,EAAQkD,EAAWE,MAAMC,OAAO/C,GAAImB,GAC5CzB,EACM,kBAAC,EAAD,CAAeA,OAAQA,IAE1B,YChCCsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCbNM,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.a96dae65.chunk.js","sourcesContent":["import React, {useEffect} from 'react';\nimport {Link} from 'react-router-dom';\nimport {string, number, shape, arrayOf} from 'prop-types';\nimport './reviews-list.css';\n\nimport {get, sortBy} from 'lodash';\n\nconst Review = (props) => {\n  const rendered = Object.entries(props.review).map(([key, value]) => <div key={key}>{value}</div>);\n  return (<div className={\"details\"}>\n    <Link to={`/reviews/${props.review.id}`}>View Details</Link>\n    {rendered}\n  </div>);\n\n};\n\nfunction ReviewsList(props) {\n  const sortDataClick = (e) => {\n    console.log(e.target.dataset.prop);\n    props.setSortData({\n      heading: e.target.dataset.prop,\n      sortOrder: !props.setSortData.asc\n    });\n  };\n  const renderedHeadings = Object.keys(get(props, 'reviews[0]') || {})\n    .map(prop => <div\n      data-prop={prop}\n      onClick={sortDataClick}\n      key={prop}>{prop}</div>);\n  const rendered = sortBy([...props.reviews], [props.sortData.heading])\n    .map((r, index) => <Review review={r} index={index}/>);\n  return (\n    <div className={'review-list container'}>\n      {/*<h1>Hello from List</h1>*/}\n      {renderedHeadings}\n      {rendered}\n    </div>\n  )\n}\n\nexport default ReviewsList;\n","import React, {Component} from 'react';\nimport {object} from 'prop-types';\n\nexport default class ReviewDetails extends Component {\n  static displayName = 'ReviewDetails';\n  static propTypes = {\n    review: object\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Hello from Details</h1>\n        <pre>\n          {JSON.stringify(this.props.review, null, 2)}\n        </pre>\n      </div>\n    )\n  }\n}\n\n","import React, {useState, useEffect} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport ReviewsList from \"./Routes/reviews-list\";\nimport ReviewDetails from \"./Routes/review-details\";\n\nfunction App() {\n  console.log('rendering the app...');\n  const [reviews, setReviews] = useState([]);\n  const [sortData, setSortData] = useState({heading: null, asc: true});\n  const getReviews = async () => {\n    const res = await fetch('https://brees-app.herokuapp.com/reviews?page=1');\n    const reviews = await res.json();\n    setReviews(reviews);\n  };\n\n  // effect hook\n  useEffect(() => {\n    if (!reviews.length) {\n      getReviews().then();\n    }\n  });\n\n  return (\n    <Router>\n      <div>\n        <nav>\n          <Link to=\"/reviews\">Wine Reviews List</Link>\n        </nav>\n        <Switch>\n         <Route exact path=\"/reviews\">\n           <ReviewsList setSortData={setSortData} sortData={sortData} reviews={reviews}/>\n          </Route>\n          <Route path=\"/reviews/:id\" component={(routeProps) => {\n            const review = reviews.find(r => r.id === routeProps.match.params.id);\n            console.log(review, routeProps.match.params.id, reviews);\n            if (review) {\n              return (<ReviewDetails review={review}/>)\n            }\n            return null;\n          }}>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nconsole.log(\"I'm a Home Page!\");\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}